{"version":3,"sources":["SortingVisualizer/colorCodes.js","algorithms/mergesort.js","algorithms/swap.js","algorithms/insertion.js","algorithms/quicksort.js","algorithms/heapsort.js","Icons/github-icon.png","SortingVisualizer/Visualizer.js","algorithms/bubblesort.js","algorithms/selectionsort.js","App.js","index.js"],"names":["colors","primaryColor","afterSortingColor","pivotActiveColor","sortedElementColor","cyan","orange","count","mergesort","arr","low","high","animationSpeed","aux","push","mid","Math","floor","right","left","k","arrayBars","document","getElementsByClassName","li","ri","length","counter","barIdx","i","setTimeout","style","backgroundColor","height","concat","swap","j","arguments","undefined","temp","quicksortHelper","speed","pivot","partition","pivotElement","tempI","setColor","color","swapHeights","heapify","n","largest","leftChild","rightChild","sort","generateRandomNumber","random","Visualizer","mainArray","setMainArray","useState","arrayLength","setArrayLength","setAnimationSpeed","algo","setAlgo","able","setAble","useEffect","populateArray","items","pointerEvents","disabled","size","tempArr","item","idx","val","colorEveryElement","sortedArray","bubbleSortAnimate","bubbleSort","map","swapped","x","mergeSort","mergeSortAnimation","insertionSortAnimate","insertionSort","selectionSortAnimate","selectionSort","minIdx","oldMinIdx","quicksortAnimate","quicksort","heapsortAnimate","heapsort","_jsx","_Fragment","children","_jsxs","className","htmlFor","name","id","value","onChange","e","target","onClick","startSorting","type","min","max","href","rel","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b2eb2f67.chunk.js","sourcesContent":["const colors = {\n  primaryColor: \"#dd85e7\",\n  afterSortingColor: \"#1481BA\",\n  pivotActiveColor: \"#ff2400\",\n  sortedElementColor: \"#4cbb17\",\n  cyan: \"#40E0D0\",\n  orange: \"#FFA500\",\n};\n\nexport default colors;\n","import colors from '../SortingVisualizer/colorCodes';\n\nlet count = 0;\n\nexport const mergeSortAnimation = (tempArr, animationSpeed) => {\n\tconst arr = tempArr.map(item => item.val);\n\tcount = 0;\n\tconst sortedArray = mergesort(arr, 0, arr.length - 1, animationSpeed);\n\treturn { sortedArray, count };\n};\n\nconst mergesort = (arr, low, high, animationSpeed) => {\n\tif (low > high) {\n\t\treturn [];\n\t}\n\n\tif (low === high) {\n\t\tlet aux = [];\n\t\taux.push(arr[low]);\n\t\treturn aux;\n\t}\n\n\tlet mid = Math.floor((high + low) / 2);\n\n\t// recursively divide the array until its sorted\n\t// in the end it will only have a single item and sorted :)\n\n\tconst right = mergesort(arr, low, mid, animationSpeed);\n\tconst left = mergesort(arr, mid + 1, high, animationSpeed);\n\n\tconst aux = [];\n\tlet k = low;\n\tconst arrayBars = document.getElementsByClassName('arrayBar');\n\n\tlet li = 0,\n\t\tri = 0; // for left and right array respectively\n\twhile (li < left.length && ri < right.length) {\n\t\tlet counter = count;\n\t\tlet barIdx = k;\n\n\t\tif (left[li] < right[ri]) {\n\t\t\taux.push(left[li]);\n\t\t\tlet i = li;\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.cyan;\n\t\t\t\tarrayBars[barIdx].style.height = `${left[i]}px`;\n\t\t\t}, counter * animationSpeed);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.pivotActiveColor;\n\t\t\t}, (counter + 1) * animationSpeed);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.primaryColor;\n\t\t\t}, (counter + 1.5) * animationSpeed);\n\t\t\tli++;\n\t\t} else {\n\t\t\taux.push(right[ri]);\n\t\t\tlet i = ri;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.cyan;\n\t\t\t\tarrayBars[barIdx].style.height = `${right[i]}px`;\n\t\t\t}, counter * animationSpeed);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.pivotActiveColor;\n\t\t\t}, (counter + 1) * animationSpeed);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.primaryColor;\n\t\t\t}, (counter + 1.5) * animationSpeed);\n\t\t\tri++;\n\t\t}\n\t\tk++;\n\t\tcount++;\n\t}\n\n\t// left exhausted\n\tif (li === left.length) {\n\t\twhile (ri < right.length) {\n\t\t\taux.push(right[ri]);\n\t\t\tlet barIdx = k;\n\t\t\tlet i = ri;\n\t\t\tlet counter = count;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.cyan;\n\t\t\t\tarrayBars[barIdx].style.height = `${right[i]}px`;\n\t\t\t}, counter * animationSpeed);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.pivotActiveColor;\n\t\t\t}, (counter + 1) * animationSpeed);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.primaryColor;\n\t\t\t}, (counter + 1.5) * animationSpeed);\n\t\t\tri++;\n\t\t\tcount++;\n\t\t\tk++;\n\t\t}\n\t} else if (ri === right.length) {\n\t\twhile (li < left.length) {\n\t\t\taux.push(left[li]);\n\t\t\tlet barIdx = k;\n\t\t\tlet i = li;\n\t\t\tlet counter = count;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.cyan;\n\t\t\t\tarrayBars[barIdx].style.height = `${left[i]}px`;\n\t\t\t}, counter * animationSpeed);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.pivotActiveColor;\n\t\t\t}, (counter + 1) * animationSpeed);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[barIdx].style.backgroundColor = colors.primaryColor;\n\t\t\t}, (counter + 1.5) * animationSpeed);\n\t\t\tli++;\n\t\t\tk++;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn aux;\n};\n","export function swap(i, j, arr = []) {\n\tlet temp = arr[i];\n\tarr[i] = arr[j];\n\tarr[j] = temp;\n}\n","import colors from '../SortingVisualizer/colorCodes';\nimport { swap } from './swap';\nexport const insertionSort = (tempArr, speed) => {\n\tlet count = 0;\n\n\tconst arrayBars = document.getElementsByClassName('arrayBar');\n\tconst arr = tempArr.map(item => item.val);\n\n\tfor (let i = 1; i < arr.length; i++) {\n\t\t// color current comparing value\n\t\tsetTimeout(() => {\n\t\t\tarrayBars[i].style.backgroundColor = colors.orange;\n\t\t\tarrayBars[i - 1].style.backgroundColor = colors.orange;\n\t\t}, count++ * speed);\n\n\t\tlet j = i;\n\t\twhile (j > 0 && arr[j] < arr[j - 1]) {\n\t\t\tlet k = j; /* to avoid es line error */\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (k !== i)\n\t\t\t\t\tarrayBars[k].style.backgroundColor = colors.sortedElementColor;\n\t\t\t\tarrayBars[k - 1].style.backgroundColor = colors.sortedElementColor;\n\n\t\t\t\tlet temp = arrayBars[k].style.height;\n\t\t\t\tarrayBars[k].style.height = arrayBars[k - 1].style.height;\n\t\t\t\tarrayBars[k - 1].style.height = temp;\n\t\t\t}, count++ * speed);\n\n\t\t\tswap(j, j - 1, arr);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (k !== i) arrayBars[k].style.backgroundColor = colors.primaryColor;\n\t\t\t\tarrayBars[k - 1].style.backgroundColor = colors.primaryColor;\n\t\t\t}, count++ * speed);\n\t\t\tj--;\n\t\t}\n\t\t// set the color to normal color\n\t\tsetTimeout(() => {\n\t\t\tarrayBars[i].style.backgroundColor = colors.primaryColor;\n\t\t\tarrayBars[i - 1].style.backgroundColor = colors.primaryColor;\n\t\t}, count * speed);\n\t}\n\treturn { arr, count };\n};\n","import colors from '../SortingVisualizer/colorCodes';\nimport { swap } from './swap';\n\nconst arrayBars = document.getElementsByClassName('arrayBar');\nlet count = 0;\n\nexport const quicksort = (tempArr, animationSpeed) => {\n\tconst arr = tempArr.map(item => item.val);\n\tcount = 0;\n\tlet low = 0;\n\tlet high = arr.length - 1;\n\n\t// main quicksort function\n\tquicksortHelper(arr, low, high, animationSpeed);\n\tcount += 2;\n\treturn { arr, count };\n};\n\nconst quicksortHelper = (arr, low, high, speed) => {\n\tif (low > high) return;\n\n\tlet pivot = partition(arr, low, high, speed);\n\n\t// Colors the element which is in its correct place\n\tsetTimeout(() => {\n\t\tarrayBars[pivot].style.backgroundColor = colors.sortedElementColor;\n\t}, count * speed);\n\tcount++;\n\n\tquicksortHelper(arr, low, pivot - 1, speed);\n\tquicksortHelper(arr, pivot + 1, high, speed);\n};\n\nconst partition = (arr, low, high, speed) => {\n\tlet pivotElement = arr[high];\n\n\t// Colors the current pivot index\n\tsetTimeout(() => {\n\t\tarrayBars[high].style.backgroundColor = colors.pivotActiveColor;\n\t}, count * speed);\n\tcount++;\n\n\tlet i = low;\n\tfor (let j = low; j < high; j++) {\n\t\t// animate the curr traversing element\n\t\tsetTimeout(() => {\n\t\t\tarrayBars[j].style.backgroundColor = colors.cyan;\n\t\t}, count * speed);\n\t\tcount += 2;\n\n\t\t// color primary to the curr traversing element\n\t\tsetTimeout(() => {\n\t\t\tarrayBars[j].style.backgroundColor = colors.primaryColor;\n\t\t}, count * speed);\n\t\tcount++;\n\n\t\tif (pivotElement > arr[j]) {\n\t\t\tlet tempI = i;\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[tempI].style.backgroundColor = colors.orange;\n\n\t\t\t\tlet temp = arrayBars[tempI].style.height;\n\t\t\t\tarrayBars[tempI].style.height = arrayBars[j].style.height;\n\t\t\t\tarrayBars[j].style.height = temp;\n\t\t\t}, count * speed);\n\t\t\tcount++;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[tempI].style.backgroundColor = colors.primaryColor;\n\t\t\t}, (count + 1) * speed);\n\t\t\tcount++;\n\n\t\t\tswap(i, j, arr);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t// resets the color of pivot element to primary\n\tsetTimeout(() => {\n\t\tarrayBars[high].style.backgroundColor = colors.primaryColor;\n\t}, count * speed);\n\tcount++;\n\n\tsetTimeout(() => {\n\t\tlet temp = arrayBars[i].style.height;\n\t\tarrayBars[i].style.height = arrayBars[high].style.height;\n\t\tarrayBars[high].style.height = temp;\n\t}, count * speed);\n\tcount++;\n\n\tswap(i, high, arr);\n\treturn i;\n};\n","import { swap } from './swap';\nimport colors from '../SortingVisualizer/colorCodes';\n\nlet count = 0;\n\nconst arrayBars = document.getElementsByClassName('arrayBar');\n\nexport const heapsort = (tempArr, speed) => {\n\tcount = 0;\n\tconst arr = tempArr.map(item => item.val);\n\tsort(arr, arr.length, speed);\n\treturn { arr, count };\n};\n\nconst setColor = (speed, color, i, j) => {\n\tif (i) {\n\t\tsetTimeout(() => {\n\t\t\tarrayBars[i].style.backgroundColor = color;\n\t\t}, count * speed);\n\t}\n\n\tif (j) {\n\t\tsetTimeout(() => {\n\t\t\tarrayBars[j].style.backgroundColor = color;\n\t\t}, count * speed);\n\t}\n\tcount++;\n};\nconst swapHeights = (speed, color, i, j) => {\n\tsetTimeout(() => {\n\t\tarrayBars[i].style.backgroundColor = color;\n\t\tarrayBars[j].style.backgroundColor = color;\n\n\t\tlet temp = arrayBars[i].style.height;\n\t\tarrayBars[i].style.height = arrayBars[j].style.height;\n\t\tarrayBars[j].style.height = temp;\n\t}, count * speed);\n\n\tcount++;\n};\n// heapify\nconst heapify = (arr, i, n, speed) => {\n\tlet largest = i;\n\tlet leftChild = i * 2 + 1;\n\tlet rightChild = i * 2 + 2;\n\n\tif (leftChild < n && arr[leftChild] > arr[largest]) largest = leftChild;\n\n\tif (rightChild < n && arr[rightChild] > arr[largest]) largest = rightChild;\n\n\tif (largest !== i) {\n\t\tswap(i, largest, arr);\n\n\t\t// color\n\t\tswapHeights(speed, colors.pivotActiveColor, i, largest);\n\t\tsetColor(speed, colors.primaryColor, i, largest);\n\t\theapify(arr, largest, n, speed);\n\t}\n};\n\n// sort\nconst sort = (arr, n, speed) => {\n\t// arrange the array\n\tfor (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n\t\theapify(arr, i, n, speed);\n\t}\n\n\tcount += 3;\n\t// one by one extract the element from heap\n\t// and put them at back\n\tfor (let i = n - 1; i >= 0; i--) {\n\t\tswap(i, 0, arr);\n\t\tswapHeights(speed, colors.orange, i, 0);\n\t\tcount += 2;\n\n\t\tsetColor(speed, colors.sortedElementColor, i);\n\t\theapify(arr, 0, i, speed);\n\t}\n};\n","export default __webpack_public_path__ + \"static/media/github-icon.fcf5f80d.png\";","import React, { useState, useEffect } from \"react\";\nimport colors from \"./colorCodes\";\n// import GithubIcon from \"../Icons/GithubIcon\";\nimport { mergeSortAnimation } from \"../algorithms/mergesort\";\nimport { insertionSort } from \"../algorithms/insertion\";\nimport { selectionSort } from \"../algorithms/selectionsort\";\nimport { bubbleSort } from \"../algorithms/bubblesort\";\nimport { quicksort } from \"../algorithms/quicksort\";\nimport { heapsort } from \"../algorithms/heapsort\";\n// stylesheet\nimport \"./SortingVisualizer.css\";\n// Sounds\n// import ResetEffect from \"./sounds/resetEffect.mp3\";\n// import CompletedEffect from \"./sounds/completedEffect.mp3\";\n// import SortingStart from \"./sounds/sortingStart.mp3\";\n// import SortingCompleted from \"./sounds/sortingCompleted.mp3\";\n// Icon\n\nimport githubIcon from \"../Icons/github-icon.png\";\n\n// Random Number Genrator\nconst generateRandomNumber = (i, j) => {\n  return Math.floor(i + Math.random() * (j - i));\n};\n\nconst Visualizer = () => {\n  // state of the array\n  const [mainArray, setMainArray] = useState([]);\n  const [arrayLength, setArrayLength] = useState(20);\n  const [animationSpeed, setAnimationSpeed] = useState(100);\n  const [algo, setAlgo] = useState(\"mergesort\");\n  const [able, setAble] = useState(true);\n\n  //Project Sounds\n\n  // let resetEffect = new Audio(ResetEffect); // Play audio when bar reset\n  // let completedEffect = new Audio(CompletedEffect);\n  // let sortingStart = new Audio(SortingStart);\n  // let sortingCompleted = new Audio(SortingCompleted);\n\n  //Render the Array Before DOM loades\n  useEffect(() => {\n    if (able) populateArray(arrayLength);\n  }, [arrayLength, algo]);\n\n  // ABLE / DISABLE BUTTONS ETC.\n  useEffect(() => {\n    const items = document.getElementsByClassName(\"able\");\n\n    if (!able) {\n      for (let i = 0; i < items.length; i++) {\n        items[i].style.pointerEvents = \"none\";\n        items[i].disabled = true;\n      }\n    } else {\n      for (let i = 0; i < items.length; i++) {\n        items[i].style.pointerEvents = \"auto\";\n        items[i].disabled = false;\n      }\n    }\n  }, [able]);\n\n  const populateArray = (size) => {\n    // resetEffect.play(); // play resetEffect here\n    const tempArr = [];\n    for (let i = 0; i < size; i++) {\n      const item = {\n        idx: i,\n        val: generateRandomNumber(25, 500),\n      };\n      tempArr.push(item);\n      if (document.getElementsByClassName(\"arrayBar\")[i] != null) {\n        document.getElementsByClassName(\"arrayBar\")[i].style.backgroundColor =\n          colors.primaryColor;\n      }\n    }\n    if (able) setMainArray(tempArr);\n  };\n\n  // colors every elements afte sorting\n  const colorEveryElement = (arr, counter) => {\n    setTimeout(() => {\n      // completedEffect.play(); // Play audion when bar will sorted\n      // sortingCompleted.play();\n      const sortedArray = [];\n      for (let i = 0; i < arr.length; i++) {\n        document.getElementsByClassName(\"arrayBar\")[i].style.backgroundColor =\n          colors.afterSortingColor;\n\n        sortedArray.push({\n          idx: i,\n          val: arr[i],\n        });\n      }\n\n      setMainArray(sortedArray);\n      setAble(true);\n    }, counter * animationSpeed);\n  };\n\n  // BUBBLE SORT\n  const bubbleSortAnimate = () => {\n    setAble(false);\n    const { arr, count } = bubbleSort(mainArray, animationSpeed);\n    colorEveryElement(arr, count + 1);\n  };\n\n  // MERGE SORT\n  const mergeSort = () => {\n    setAble(false);\n    const { sortedArray, count } = mergeSortAnimation(\n      mainArray,\n      animationSpeed\n    );\n    colorEveryElement(sortedArray, count + 5);\n  };\n\n  // INSERTION SORT\n  const insertionSortAnimate = () => {\n    setAble(false);\n    const { arr, count } = insertionSort(mainArray, animationSpeed);\n    colorEveryElement(arr, count + 1);\n  };\n\n  // SELECTION SORT\n  const selectionSortAnimate = () => {\n    setAble(false);\n    const { arr, count } = selectionSort(mainArray, animationSpeed);\n    colorEveryElement(arr, count + 2);\n  };\n\n  //QUICK SORT\n  const quicksortAnimate = () => {\n    setAble(false);\n    const { arr, count } = quicksort(mainArray, animationSpeed);\n    colorEveryElement(arr, count + 1);\n  };\n\n  // HEAP SORT\n  const heapsortAnimate = () => {\n    setAble(false);\n    const { arr, count } = heapsort(mainArray, animationSpeed);\n    colorEveryElement(arr, count + 1);\n  };\n  const startSorting = (algo) => {\n    // sortingStart.play();\n    switch (algo) {\n      case \"bubblesort\":\n        bubbleSortAnimate();\n        break;\n\n      case \"mergesort\":\n        mergeSort();\n        break;\n\n      case \"selectionsort\":\n        selectionSortAnimate();\n        break;\n\n      case \"insertionsort\":\n        insertionSortAnimate();\n        break;\n      case \"quicksort\":\n        quicksortAnimate();\n        break;\n      case \"heapsort\":\n        heapsortAnimate();\n        break;\n      default:\n        mergeSort();\n        break;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"visualizeContainer\">\n          {mainArray.map((item) => {\n            return (\n              <div\n                className=\"arrayBar\"\n                style={{\n                  height: `${item.val}px`,\n                  backgroundColor: colors.primaryColor,\n                }}\n                key={item.idx}\n              >\n                {arrayLength < 31 && able && <span>{item.val}</span>}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"sidebar\">\n          <header>\n            Sorting Algorithm <br /> Visualizer\n          </header>\n          <div className=\"select-box able\">\n            <label htmlFor=\"algo\">Select Algorithm</label>\n\n            <select\n              name=\"algo\"\n              id=\"select\"\n              value={algo}\n              onChange={(e) => setAlgo(e.target.value)}\n              className=\"slt\"\n            >\n              <option value=\"mergesort\">Merge Sort</option>\n              <option value=\"bubblesort\">Bubble Sort</option>\n              <option value=\"insertionsort\">Insertion Sort</option>\n              <option value=\"selectionsort\">Selection Sort</option>\n              <option value=\"quicksort\">Quick Sort</option>\n              <option value=\"heapsort\">Heap Sort</option>\n            </select>\n          </div>\n          <button className=\"button able\" onClick={() => startSorting(algo)}>\n            Sort\n          </button>\n\n          <button\n            onClick={() => populateArray(arrayLength)}\n            className=\"new-arr-btn button able\"\n          >\n            Random Bar\n          </button>\n\n          <div className=\"slider-container\">\n            <label>Length of Array : {arrayLength} </label>\n            <input\n              className=\"input-range able\"\n              type=\"range\"\n              value={arrayLength}\n              onChange={(e) => setArrayLength(e.target.value)}\n              min=\"7\"\n              max=\"150\"\n            />\n          </div>\n          <div className=\"slider-container\">\n            <label>Speed : {animationSpeed}</label>\n            <label>\n              Fast\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Slow\n            </label>\n\n            <input\n              className=\"input-range able\"\n              type=\"range\"\n              value={animationSpeed}\n              onChange={(e) => setAnimationSpeed(e.target.value)}\n              min=\"100\"\n              max=\"1000\"\n            />\n          </div>\n          <div className=\"social\">\n            <a\n              href=\"https://www.linkedin.com/in/programmershri/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Connect with me...\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Visualizer;\n","import colors from '../SortingVisualizer/colorCodes';\n\nexport const bubbleSort = (tempArr, speed) => {\n\tconst arr = tempArr.map(item => item.val);\n\tlet count = 0;\n\n\tconst arrayBars = document.getElementsByClassName('arrayBar');\n\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tlet swapped = false;\n\t\tfor (let j = 0; j < arr.length - i - 1; j++) {\n\t\t\t// colors it up to active\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[j].style.backgroundColor = colors.cyan;\n\t\t\t\tarrayBars[j + 1].style.backgroundColor = colors.cyan;\n\t\t\t}, count++ * speed);\n\n\t\t\tif (arr[j] > arr[j + 1]) {\n\t\t\t\t// swap the heights\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tarrayBars[j].style.backgroundColor = colors.pivotActiveColor;\n\t\t\t\t\tarrayBars[j + 1].style.backgroundColor = colors.pivotActiveColor;\n\n\t\t\t\t\tlet temp = arrayBars[j].style.height;\n\t\t\t\t\tarrayBars[j].style.height = arrayBars[j + 1].style.height;\n\t\t\t\t\tarrayBars[j + 1].style.height = temp;\n\t\t\t\t}, count++ * speed);\n\n\t\t\t\tcount += 1;\n\t\t\t\tswapped = true;\n\n\t\t\t\tlet temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t\t// color back to normal\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[j].style.backgroundColor = colors.primaryColor;\n\t\t\t\tarrayBars[j + 1].style.backgroundColor = colors.primaryColor;\n\t\t\t}, count++ * speed);\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tarrayBars[arr.length - i - 1].style.backgroundColor =\n\t\t\t\tcolors.sortedElementColor;\n\t\t\tif (swapped === false) {\n\t\t\t\tfor (let x = 0; x < i; x++) {\n\t\t\t\t\tarrayBars[x].style.backgroundColor = colors.sortedElementColor;\n\t\t\t\t}\n\t\t\t}\n\t\t}, count * speed);\n\t\tif (swapped === false) break;\n\t}\n\n\treturn { arr, count };\n};\n","import { swap } from './swap';\n\nexport const selectionSort = (tempArr, speed) => {\n\tconst arr = tempArr.map(item => item.val);\n\tconst arrayBars = document.getElementsByClassName('arrayBar');\n\n\tlet count = 0;\n\tfor (let i = 0; i < arr.length; i++) {\n\t\t// initially minidx is set to i\n\t\tlet minIdx = i;\n\n\t\t// change the color of the minIdx to red to identify\n\t\tsetTimeout(() => {\n\t\t\tarrayBars[minIdx].style.backgroundColor = 'red';\n\t\t}, count * speed);\n\t\tcount++;\n\n\t\t// traverse for the next smallest item\n\t\tfor (let j = i + 1; j < arr.length; j++) {\n\t\t\t// current item color to orange\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[j].style.backgroundColor = 'orange';\n\t\t\t}, (count + 2) * speed);\n\n\t\t\tlet oldMinIdx;\n\t\t\tif (arr[j] < arr[minIdx]) {\n\t\t\t\toldMinIdx = minIdx;\n\t\t\t\tminIdx = j;\n\n\t\t\t\t// change the old minIdx to default color\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tarrayBars[oldMinIdx].style.backgroundColor = '#dd85e7';\n\t\t\t\t}, (count + 3) * speed);\n\t\t\t}\n\t\t\t// changing the current item to default color\n\t\t\tsetTimeout(() => {\n\t\t\t\tarrayBars[j].style.backgroundColor = '#dd85e7';\n\t\t\t}, (count + 3) * speed);\n\t\t\tcount++;\n\t\t}\n\n\t\tswap(i, minIdx, arr);\n\n\t\t// swap the heights and color the sorted item green\n\t\tsetTimeout(() => {\n\t\t\tlet temp = arrayBars[i].style.height;\n\t\t\tarrayBars[i].style.height = arrayBars[minIdx].style.height;\n\t\t\tarrayBars[minIdx].style.height = temp;\n\t\t\tarrayBars[i].style.backgroundColor = 'green';\n\t\t}, (count + 3) * speed);\n\t\tcount++;\n\t}\n\treturn { arr, count };\n};\n","import React from 'react';\nimport './App.css';\nimport Visualizer from './SortingVisualizer/Visualizer';\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Visualizer />\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}